package ExamplesToReinforce.Examples_19;
/*
Каков будет (результат компиляции) вывод на экран (сначала найти ответ устно,
и только за тем запустить код)?

!!! Переменные специально похожи одна на другую (не надо так делать, как по мне), и это запутывает !!!
*/
public class InterestingExamples_19 {
    public static void main(String[] args) {
        PlayGameTwo.startGame();
    }
}

class PlayGameTwo{
    // В данном классе есть статическая переменная 'а', которая принадлежит данному классу, и...
    static int a = 3;
    // ... есть метод в котором мы ...
    static void startGame(){
        // ... создаем локальную переменную с таким же именем и тут же присваиваем ей значение 5.
        int a = 5;
        // Запускаем статический метод этого же класса в котором ...
        menuGame();
    }
    static void menuGame(){
        /* ... (и снова магия) происходят манипуляции СО СТАТИЧЕСКОЙ ПЕРЕМЕННОЙ данного класса,
        о существовании предыдущей локальной переменной метода startGame() тут ничего не известно,
        т.к. она деже не передавалась в качестве аргумента, ну и конечно синтаксис... */
        a += 2; // 3 + 2 = 5
        // Запускаем статический метод *.endGame() куда передаем в качестве аргумента значение 'а', но...
        endGame(a);
        System.out.println(a); // На печать уходит -> 5
    }
    /* ...сюда эта переменная принимается, как совершенно новая (пусть будет а") и далее уже с ней
    происходит вся работа, а статическая переменная 'а' класса PlayGameTwo все еще держит в себе
    значение 5, которое и уйдет на экран */
    static void endGame(int a){
        a -=1;
        /* 5 - 1 = 4, но это другая переменная и она на печать не идет.

        Как я понимаю, шутка про то, что программист JAVA 90% времени тратит на придумывание
        релевантных имен для методов и переменных вовсе не шутка */
    }
}